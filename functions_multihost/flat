#! bin/bash

# function to tell me how much data I have left to use per day for the month
data () {
    days_in_month=$(date --date="$(date +%Y-%m-01) +1 month -1 day" '+%d')
    days_left_in_month=$(echo $days_in_month - $(date +%d) + 1 | bc)
    data_left=$(vnstat -m -i eno1 | awk '/estimated/ {print 100 - $8}')
    av_per_day=$(echo "scale=2; $data_left / ($days_left_in_month)" | bc)
    echo "days left:        $days_left_in_month"
    echo "total GiB left:   $data_left"
    echo "use GiB per day:  $av_per_day"
}

# function to find the total duration of a set of tracks in minutes
tl () {
    total=0
    for file in "$@"; do
        # find the duration of each track in seconds
        duration=$(mediainfo "$file" | awk -F: '/Duration/ {print $2}' | awk '{mins += $1} {secs += $3} END {print mins*60 + secs}')
        total=$(( $total + $duration ))
    done
    # convert total secs to mins and /2 to correct for the awk function finding
    # two lines containing the duration PER FILE.
    total=$(( ($total/60)/2 ))
    echo "$total"
}

# function to play a set of files in vlc and shutdown the pc after it's done
vlcsd () {
    # get total length of tracks in mins, +1 min to ensure we don't cut off the
    # last bit of the last track
    total=$(tl "$@")
    total=$(( $total +1 ))

    # write the last played track to a file so I know where to start from
    last_arg="${@: -1}"
    path_to_tracks=$(echo "${last_arg}" | sed 's_/[^/]*$__')
    basename "${last_arg}" > "${path_to_tracks}"/last_played_track

    # send the shutdown signal and start playing the tracks in order
    shutdown "+$total"
    vlc --no-loop --no-random --no-repeat "$@" &
}

# video editing functions
vidspeed () {
    if [[ $# -ne 2 ]] ; then
        echo 'please supply a speed and a video file'
        echo 'e.g: vidspeed 1.2 myvideo.mp4'
        return 1
    fi
    speed=$1
    name=$2
    echo $speed
    echo $name
    ffmpeg -i $name.mp4 -filter_complex "[0:v]setpts=PTS/$speed[v];[0:a]atempo=$speed[a]" -map "[v]" -map "[a]" "$name"_sp$speed.mp4
}

vidcompile () {
    if [[ $# -eq 0 ]] ; then
        echo 'name of output video not supplied'
        return 1
    fi
    ls *mp4 | cut -f 1 | awk '{printf "file '\''%s'\''\n", $0}' > input_vids
    ffmpeg -f concat -i input_vids -c copy $1.mp4
    mkdir -p completed/$1/components
    mv *.mp4 input_vids completed/$1/components
    mv completed/$1/components/$1.mp4 completed/$1
}

vidaudio () {
    if [[ $# -eq 0 ]] ; then
        echo 'name of input video not supplied'
        return 1
    fi

    ffmpeg -i completed/$1/$1.mp4 -i completed/$1/$1.mp3 -c copy -map 0:0 -map 1:0 -map 0:1 -disposition:a:1 comment completed/$1/$1_enhance.mp4
    mv completed/$1/$1.mp4 completed/$1/$1.mp3 completed/$1/components
}

vidrmlast () {
    rm $(ls *mp4 | cut -f1 | tail -n1)
}

vidplaylast () {
    vlc $(ls *mp4 | cut -f1 | tail -n1) &
}

vidduration () {
    total_duration=0
    for file in $(ls *.mp4)
    do
        duration=$(ffmpeg -i $file 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')

        total_duration=$(bc <<< "$total_duration + $duration")

    done
    echo $(bc <<< "$total_duration / 60")
}

# close stupid bluetooth error window
wmctrl -ic 0x01c0000d
