# Run command/application and choose paths/files with fzf.
# Always return control of the terminal to user (e.g. when opening GUIs).
# Usage:
# f cd (hit enter, choose path)
# f cat (hit enter, choose files)
# f vim (hit enter, choose files)
# f vlc (hit enter, choose files)
f() {
    # store the files from fzf
    IFS=$'\n' files=($(fzf --query="$2" --multi))

    # if no files passed (e.g. if Esc pressed), return to terminal
    if [ -z "${files}" ]; then
        return 1
    fi

    # send the files to a program
    # some programs should not be run as background
    if ! [[ $1 =~ ^(cd)$ ]]; then
        $1 "${files[@]}" &
    else
        $1 "${files[@]}"
    fi

    # if the program is not on the list of GUIs (e.g. vim, cat, etc.) bring it
    # to foreground so we can see the output. Also put cd on this list.
    if ! [[ $1 =~ ^(cd|zathura|vlc|eog|kolourpaint)$ ]]; then
        fg %%
    fi
}

# cat but just cut at edge of tmux pane
catc () {
width=$(tmux display-message -p '#{pane_width}')
cat "$@" | cut -c -$(($width-3))
}

# wrapper for bash script (passes all arguments)
# also displays todo list with numbers
todo () {
~/todo/./todo.sh "$@"
catc -n $TODO_PATH/master_todo.md
}

# alias gitup='git add . && git commit -m "upload" && git push'
gitup () {
git add -A && git commit -m "$1" && git push
}

# mkdir and cd into it
mkcddir () {
mkdir -p $1 && cd $1
}

apa () {
rename 'y/A-Z/a-z/' *.pdf
rename 's/ /_/g' *.pdf
rename 's/_.\.//g' *.pdf
rename 's/,//g' *.pdf
rename 's/\)\._/)_/g' *.pdf
rename 's/\._/_[/g' *.pdf
rename 's/\)\./)]\./g' *.pdf
rename 's/_&//g' *.pdf
rename 's/:/-/g' *.pdf
}

cleanname () {
rename 'y/A-Z/a-z/' *
rename 's/ /_/g' *
rename "s/'//g" *
rename 's/,//g' *
rename 's/\./_/g' *  
# rename 's/_\w+$/.test/g' *
}

