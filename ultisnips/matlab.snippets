snippet mat "new .m script"
%% Doc 
% $1

%##############################################################################
$0
endsnippet

snippet cb "%#### Break #####"
%##############################################################################
endsnippet

snippet spr "sprintf" i
sprintf('${1:%s}', $2);
endsnippet

snippet fpr "fprintf" b
fprintf('${1:%s}${2:...\n}', $3);
endsnippet

snippet for "for loop" b
for $1idx = ${2:1:}$3
	$0
end
endsnippet

snippet if "if statement" b
if $1
	$0
end
endsnippet

snippet 3d "imagesc each slice of 3d matrix"
figure
for slice_idx = 1:size($1,${2:1})
    subplot(ceil(sqrt(size($1,$2))), ceil(sqrt(size($1,$2))), slice_idx)
    imagesc(squeeze(vol($3slice_idx${4:,:,:})))
    axis image,${5: colormap gray}
end
endsnippet



snippet func "define a function"
function ${1:out} = ${2:function name}(${3:arg}, ${4:arg}, ${5:arg}, ${6:arg}, ${7:arg}, varargin)
    %% documentation:
    % ${10:describe what the function does}

	% mandory arguments:
	% $3 :  

	% $4 :  

	% $5 :  

	% $6 :  

	% $7 :  

    % optional arguments (passed as structure - see usage example below):
    % $8 :  (default = )
    % $9 :  (default = )

    % function usage example:
    % clear $2_params
    % $2_params.$8 = <value1>;
    % $2_params.$9 = <value2>;
    % $1 = $2($3, $4, $5, $6, $7, $2_params);

    %% set default values for optional variables
	% ${8:optional_arg1};
	% ${9:optional_arg2};

    %% override optional arguments
    % if varagin variables have been provided, overwrite the above default
    % values with provided values
    if ~isempty(varargin)
        if size(fieldnames(varargin{1}), 1) ~= 0
            vars_in_fields = fieldnames(varargin{1});
            % check variable names in varargin are expected by this function 
            for i = 1:numel(vars_in_fields)
                if ~exist(vars_in_fields{i}, 'var')
                    error(sprintf([['variable <%s> does not correspond ',...
                        'exactly to any variable name used in the function',...
                        '\n\nvalid variable names are as follows:',...
                        '\n'],...

                        
                        ], vars_in_fields{i}))
                end
            end
            additional_params = varargin{1};
            for additional_params_index = 1:size(fieldnames(varargin{1}), 1)
                eval([vars_in_fields{additional_params_index},...
                    ' = additional_params.',...
                    vars_in_fields{additional_params_index}, ';'])
            end
        end
    end

	%% start the actual fuction

	$0
endsnippet
